// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  preferences   String?   @default("{}")
  
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  projects      Project[]
  categories    Category[]
  notifications Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?  @default("#3B82F6")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]
}

model Category {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#6B7280")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  completed   Boolean    @default(false)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  reminderAt  DateTime?
  recurring   RecurringType?
  recurringInterval Int? @default(1)
  recurringEndDate DateTime?
  projectId   String?
  categoryId  String?
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  completedAt DateTime?
  
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project  Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subtasks Subtask[]
  attachments Attachment[]
  notifications Notification[]
  googleEventId String?
}

model Subtask {
  id        String   @id @default(cuid())
  title     String
  completed Boolean  @default(false)
  taskId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  url       String
  size      Int
  mimeType  String
  taskId    String
  createdAt DateTime @default(now())
  
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  userId    String
  taskId    String?
  createdAt DateTime         @default(now())
  
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RecurringType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum NotificationType {
  REMINDER
  OVERDUE
  DUE_SOON
  COMPLETED
  GENERAL
}